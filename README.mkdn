# NAME

Text::Bidi - Unicode bidi algorithm using libfribidi

# VERSION

version 2.05

# SYNOPSIS

    # Each displayed line is a "paragraph"
    use Text::Bidi qw(log2vis);
    ($par, $map, $visual) = log2vis($logical);
    # or just
    $visual = log2vis(...);

    # with real paragraphs:
    $p = new Text::Bidi::Paragraph $logical;
    $visual = $p->visual($off, $len);

# EXPORT

The following functions can be exported (nothing is exported by default):

- ["log2vis"](#log2vis)
- ["is\_bidi"](#is\_bidi)
- ["get\_mirror\_char"](#get\_mirror\_char)

All of them can be exported together using the `:all` tag.

# DESCRIPTION

This module provides basic support for the Unicode bidirectional (Bidi) text 
algorithm, for displaying text consisting of both left-to-right and 
right-to-left written languages (such as Hebrew and Arabic.) It does so via  
a _swig_ interface file to the _libfribidi_ library.

The fundamental purpose of the bidi algorithm is to reorder text given in 
logical order into text in visually correct order, suitable for display using 
standard printing commands. \`\`Logical order'' means that the characters are 
given in the order in which they would be read if printed correctly. The 
direction of the text is determined by properties of the unicode characters, 
usually without additional hints.  See 
[http://www.unicode.org/unicode/reports/tr9/](http://www.unicode.org/unicode/reports/tr9/) for more details on the 
problem and the algorithm.

## Standard usage

The bidi algorithm works in two stages. The first is on the level of a 
paragraph, where the direction of each character is computed. The second is 
on the level of the lines to be displayed. The main practical difference is 
that the first stage requires only the text of the paragraph, while the 
second requires knowledge of the width of the displayed lines. The module (or 
the library) does not determine how the text is broken into paragraphs.

The main interface is provided by [Text::Bidi::Paragraph](http://search.cpan.org/perldoc?Text::Bidi::Paragraph), see there for 
details. This module provides an abreviation, ["log2vis"](#log2vis), which combines 
creating a paragraph object with calling ["visual" in Text::Bidi::Paragraph](http://search.cpan.org/perldoc?Text::Bidi::Paragraph#visual) on 
it.  It is particularly useful in the case that every line is a paragraph on 
its own:

    $visual = log2vis($logical);

There are more options (see the corresponding section), but this is 
essentially it. The rest of this documentation will probably be useful only 
to people who are familiar with _libfribidi_ and who wish to extend or 
modify the module.

## The object-oriented approach

All functions here can be called using either a procedural or an object 
oriented approach. For example, you may do either

        $visual = log2vis($logical);

or

        $bidi = new Text::Bidi;
        $visual = $bidi->log2vis($logical);

The advantages of the second form is that it is easier to move to a 
sub-class, and that two or more objects with different parameters can be used 
simultaneously. If you are interested in deriving from this class, please see 
["SUBCLASSING"](#SUBCLASSING).

# FUNCTIONS

## log2vis

    my $visual = log2vis($logical,...);

Treat the input __$logical__ as a one line paragraph, and apply all stages of 
the algorithm to it. This works well if the paragraph does indeed span only 
one visual line. The other arguments are passed to 
["visual" in Text::Bidi::Paragraph](http://search.cpan.org/perldoc?Text::Bidi::Paragraph#visual), but this is probably worthless.

## is\_bidi()

    my $bidi = is_bidi($logical);

Returns true if the input __$logical__ contains bidi characters. Otherwise, 
the output of the bidi algorithm will be identical to the input, hence this 
helps if we want to short-circuit.

## get\_mirror\_char()

    my $mir = get_mirror_char('['); # $mir == ']'

Return the mirror character of the input, possibly itself.

# SUBCLASSING

The rest of the documentation is only interesting if you would like to derive 
from this class. The methods listed under ["METHODS"](#METHODS) are wrappers around the 
similarly named functions in libfribidi, and may be useful for this purpose.

If you do sub-class this class, and would like the procedural interface to 
use your functions, put a line like

        $Text::Bidi::GlobalClass = __PACKAGE__;

in your module.

# METHODS

## new

    $tb = new Text::Bidi [tie_byte => ..., tie_long => ...];

Create a new [Text::Bidi](http://search.cpan.org/perldoc?Text::Bidi) object. If the _tie\_byte_ or _tie\_long_ options 
are given, they should be the names (strings) of the classes used as dual 
life arrays, most probably derived class of [Text::Bidi::Array::Byte](http://search.cpan.org/perldoc?Text::Bidi::Array::Byte) and 
[Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long), respectively.

This method is probably of little interest for standard (procedural) use.

## utf8\_to\_internal

    $la = $tb->utf8_to_internal($str);

Convert the Perl string _$str_ into the representation used by libfribidi.  
The result will be a [Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long).

## internal\_to\_utf8

    $str = $tb->internal_to_utf8($la);

Convert the long array _$la_, representing a string encoded in to format 
used by libfribidi, into a Perl string. The array _$la_ can be either a 
[Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long), or anything that can be used to construct it.

## get\_bidi\_types

    $types = $tb->get_bidi_types($internal);

Returns a [Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long) with the list of Bidi types of the text 
given by $internal, a representation of the paragraph text, as returned by 
utf8\_to\_internal(). Wraps fribidi\_get\_bidi\_types(3).

## get\_bidi\_type\_name

    say $tb->get_bidi_type_name($Text::Bidi::Type::LTR); # says 'LTR'

Return the string representation of a Bidi character type, as in 
fribidi\_get\_bidi\_type\_name(3). Note that for the above example, one needs to 
use [Text::Bidi::Constants](http://search.cpan.org/perldoc?Text::Bidi::Constants).

## get\_joining\_types

    $types = $tb->get_joining_types($internal);

Returns a [Text::Bidi::Array::Byte](http://search.cpan.org/perldoc?Text::Bidi::Array::Byte) with the list of joining types of the 
text given by $internal, a representation of the paragraph text, as returned 
by ["utf8\_to\_internal"](#utf8\_to\_internal). Wraps fribidi\_get\_joining\_types(3).

## get\_joining\_type\_name

    say $tb->get_joining_type_name($Text::Bidi::Joining::U); # says 'U'

Return the string representation of a joining character type, as in 
fribidi\_get\_joining\_type\_name(3). Note that for the above example, one needs 
to use [Text::Bidi::Constants](http://search.cpan.org/perldoc?Text::Bidi::Constants).

## get\_par\_embedding\_levels

    ($odir, $lvl) = $tb->get_par_embedding_levels($types[, $dir]);

Return the embedding levels of the characters, whose types are given by 
_$types_. _$types_ is a [Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long) of Bidi types, as 
returned by ["get\_bidi\_types"](#get\_bidi\_types). _$dir_ is the base paragraph direction. If 
not given, it defaults to `FRIBIDI_PAR_ON` (neutral).

The output is the resolved paragraph direction _$odir_, and the 
[Text::Bidi::Array::Byte](http://search.cpan.org/perldoc?Text::Bidi::Array::Byte) array _$lvl_ of embedding levels.

## mirrored

    $mirrored = $tb->mirrored($lvl, $internal);

Returns the internal representation of the paragraph, with mirroring applied.  
The internal representation of the original paragraph (as returned by 
["utf8\_to\_internal"](#utf8\_to\_internal)) should be passed in __$internal__, while the embedding 
levels (as returned by ["get\_par\_embedding\_levels"](#get\_par\_embedding\_levels)) should be in __$lvl__.  
This method wraps fribidi\_shape\_mirroring(3).

## reorder

    $str = $tb->reorder($in, $map[, $offset[, $len]]);
    say $tb->reorder([qw(A B C)], [2, 0, 1]); # says CAB

View the array ref __$map__ as a permutation, and permute the list (of 
characters) __$in__ according to it. The result is joined, to obtain a string. 
If __$offset__ and __$len__ are given, returns only that part of the resulting 
string.

## reorder\_map

    ($elout, $mout) = $tb->reorder_map($types, $offset, $len, $par,
                                       $map, $el, $flags);

Compute the reordering map for bidi types given by __$types__, for the 
interval starting with __$offset__ of length __$len__. Note that this part of 
the algorithm depends on the interval in an essential way. __$types__ is an 
array of types, as computed by ["get\_bidi\_types"](#get\_bidi\_types). The other arguments are 
optional:

- __$par__

    The base paragraph direction. Computed via ["get\_par\_embedding\_levels"](#get\_par\_embedding\_levels) if 
    not defined.

- __$map__

    An array ref (or a [Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long)) from a previous call (with a 
    different interval). The method is called repeatedly for the same paragraph, 
    with different intervals, and the reordering map is updated for the given 
    interval. If not defined, initialised to the identity map.

- __$el__

    The embedding levels. If not given, computed by a call to 
    ["get\_par\_embedding\_levels"](#get\_par\_embedding\_levels).

- __$flags__

    A specification of flags, as described in fribidi\_reorder\_line(3). The flags 
    can be given either as a number (using `$Text::Bidi::Flags::..` from 
    [Text::Bidi::Constants](http://search.cpan.org/perldoc?Text::Bidi::Constants)), or as a hashref of the form
    `{REORDER_NSM => 1}`. Defaults to `FRIBIDI_FLAGS_DEFAULT`.

The output consists of the modified map __$mout__ (a 
[Text::Bidi::Array::Long](http://search.cpan.org/perldoc?Text::Bidi::Array::Long)), and possibly modified embedding levels 
__$elout__.

# BUGS

There are no real tests for any of this.

Shaping is not supported (probably), since I don't know what it is. Help 
welcome!

# SEE ALSO

[Text::Bidi::Paragraph](http://search.cpan.org/perldoc?Text::Bidi::Paragraph)

[Text::Bidi::Constants](http://search.cpan.org/perldoc?Text::Bidi::Constants)

[Encode](http://search.cpan.org/perldoc?Encode)

[The fribidi library](http://fribidi.org/)

[Swig](http://www.swig.org)

[The unicode bidi algorithm](http://www.unicode.org/unicode/reports/tr9/)

# AUTHOR

Moshe Kamensky <kamensky@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Moshe Kamensky.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
